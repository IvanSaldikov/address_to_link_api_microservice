version: "3"

# хранилища
volumes:
  pgdata:
    driver: local

# Образы, которые мы хотим поднять
services:
  nginx:
    # при падении будет стараться подняться
    restart: always
    # только свежий nginx
    image: nginx:latest
    container_name: ngx
    # слушает порт 80
    expose:
      - 80
    # мапаем порт 80 на его 8000. Тогда сайт будет доступен по адресу localhost. Убедись, что порт у тебя не занят.
    ports:
      - "80:8000"
    # монтируем только те директории, в которых лежит статика, т.к. nginx с динамикой не будет работать. Также директорию с логами и файл настройки, который мы подготовили.
    volumes:
      - ./api/static:/srv/www/api/static
      - ./api/media:/srv/www/api/media
      - ./api/logs:/srv/www/api/logs
      - ./nginx:/etc/nginx/conf.d
    # и nginx зависит от контейнера python. Т.е. python должен быть запущен первым
    depends_on:
      - python
  python:
    restart: always
    # указываем откуда собирать образ
    build:
      context: .
      dockerfile: api/Dockerfile
      # Аргументы идентификаторов пользователя и группы (НЕ root)
      args:
        UID: 1000
        GID: 1000
    # монтируем директорию проекта
    volumes:
      - ./api:/srv/www/api
    container_name: python-django
    expose:
      - 8000
    env_file:
      - api/.env
    ports:
      - "8000:8000"
    # запускаем gunicorn
    command: "gunicorn -c gunicorn.py api.wsgi"
    #command: "python3 manage.py runserver 0.0.0.0:8000"

